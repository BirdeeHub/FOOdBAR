package views

import (
	"fmt"
	"foodbar/views/viewutils"
	"foodbar/views/tabviews"
)

script htmxAllowedCodes() {
	document.addEventListener("DOMContentLoaded", (event) => {
		document.body.addEventListener("htmx:beforeSwap", function(evt) {
			if (evt.detail.xhr.status === 422) {
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
	})
}

templ Homepage(pd viewutils.PageData) {
	<!DOCTYPE html>
	@colorsCSS()
	<html lang="en">
		<head>
			<title>üçú FOOd-BAR</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://unpkg.com/htmx.org/dist/htmx.min.js"></script>
			<link rel="stylesheet" href="/styles/templ.css"/>
		</head>
		<body class="bodycolors">
			@BodyContents(pd)
			@htmxAllowedCodes()
		</body>
	</html>
}

templ BodyContents(pd viewutils.PageData) {
	<div class={ PageContainerCSS() }>
		<div class={ PageHeaderContainerCSS() }>
			Hello, chef!
		</div>
		<div id="tabButtons" class={ TabButtonContainerCSS() }>
			@TabButton(viewutils.Recipe)
			@TabButton(viewutils.Pantry)
			@TabButton(viewutils.Menu)
			@TabButton(viewutils.Shopping)
			@TabButton(viewutils.Preplist)
			@TabButton(viewutils.Earnings)
		</div>
		<div class={ TabContainerCSS() }>
			@viewutils.RenderListWithComponent(pd.TabDatas, TabViewContainer)
		</div>
	</div>
}

// this has to return a tab button that does the hx-post to pull up the tab
// and also is able to detect if it is dragged and to where
templ TabButton(tt viewutils.TabType) {
	<div id={ fmt.Sprintf("tabButton_%s", tt) } class={ TabButtonItemCSS() }>
		üçú	{ fmt.Sprintf("%s",tt) }
	</div>
}

templ TabViewContainer(td viewutils.TabData) {
	<div id={ fmt.Sprintf("tabContainer_%s", td.Ttype) } class={ TabViewContainerCSS() }>
		@RenderTabContents(td)
	</div>
}

templ RenderTabContents(td viewutils.TabData) {
	if td.Ttype == viewutils.Recipe {
		<div style="text-align: center;">
			Recipes!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
			@tabviews.RecipeTabContents(td)
		</div>
	} else if td.Ttype == viewutils.Pantry {
		<div style="text-align: center;">
			Pantry!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
			@tabviews.PantryTabContents(td)
		</div>
	} else if td.Ttype == viewutils.Menu {
		<div style="text-align: center;">
			Menu!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
			@tabviews.MenuTabContents(td)
		</div>
	} else if td.Ttype == viewutils.Shopping {
		<div style="text-align: center;">
			Shopping!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
			@tabviews.ShoppingTabContents(td)
		</div>
	} else if td.Ttype == viewutils.Preplist {
		<div style="text-align: center;">
			Preplist!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
			@tabviews.PreplistTabContents(td)
		</div>
	} else if td.Ttype == viewutils.Earnings {
		<div style="text-align: center;">
			Earnings!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
			@tabviews.EarningsTabContents(td)
		</div>
	}
}
