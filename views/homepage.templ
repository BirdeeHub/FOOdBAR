package views

import (
	"fmt"
)

script htmxAllowedCodes() {
	document.addEventListener("DOMContentLoaded", (event) => {
		document.body.addEventListener("htmx:beforeSwap", function(evt) {
			if (evt.detail.xhr.status === 422) {
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
	})
}

templ Homepage(pd PageData) {
	<!DOCTYPE html>
	@colorsCSS()
	<html lang="en">
		<head>
			<title>üçú FOOd-BAR</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://unpkg.com/htmx.org/dist/htmx.min.js"></script>
			<link rel="stylesheet" href="/styles/templ.css"/>
		</head>
		<body class="bodycolors">
			@BodyContents(pd)
			@htmxAllowedCodes()
		</body>
	</html>
}

templ BodyContents(pd PageData) {
	<div class={ pageContainerCSS() }>
		<div class={ pageHeaderContainerCSS() }>
			Hello, chef!
		</div>
		<div id="tabButtons" class={ tabButtonContainerCSS() }>
			@tabButton(Recipe)
			@tabButton(Pantry)
			@tabButton(Menu)
			@tabButton(Shopping)
			@tabButton(Preplist)
			@tabButton(Earnings)
		</div>
		<div class={ tabContainerCSS() }>
			@renderListWithComponent(pd.TabDatas, tabViewContainer)
		</div>
	</div>
}

// this has to return a tab button that does the hx-post to pull up the tab
// and also is able to detect if it is dragged and to where
templ tabButton(tt TabType) {
	<div id={ fmt.Sprintf("tabButton_%s", tt) } class={ tabButtonItemCSS() }>
		üçú	{ fmt.Sprintf("%s",tt) }
	</div>
}

templ tabViewContainer(td TabData) {
	<div id={ fmt.Sprintf("tabContainer_%s", td.Ttype) } class={ tabViewContainerCSS() }>
		@renderTabContents(td)
	</div>
}

templ renderTabContents(td TabData) {
	if td.Ttype == Recipe {
		<div style="text-align: center;">
			Recipes!
		</div>
		<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) } class={ tabListContainerCSS() }>
			@recipeTabContents(td)
		</div>
	} else if td.Ttype == Pantry {
	} else if td.Ttype == Menu {
	} else if td.Ttype == Shopping {
	} else if td.Ttype == Preplist {
	} else if td.Ttype == Earnings {
	}
}

templ recipeTabContents(td TabData) {
	@renderListWithComponent(td.Items, recipeItemContainer)
}

templ recipeItemContainer(item TabItem) {
	<div id={ fmt.Sprintf("%s", item.ItemID.String()) } class={ tabListItemCSS() }>
		<div class={ listItemElementCSS() }>
			{ item.ItemName }
		</div>
		<div class={ listItemElementCSS() }>
			@trashcan()
		</div>
	</div>
}
