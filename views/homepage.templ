package views

import (
	"fmt"
	foodlib "FOOdBAR/FOOlib"
	"FOOdBAR/views/tabviews"
)

templ Homepage(pd *foodlib.PageData) {
	<!DOCTYPE html>
	<html lang="en">
		@getColorScheme(fmt.Sprintf("%s/api/mediaQuery", foodlib.PagePrefix))
		@tabviews.ColorsCSS()
		@htmxAllowedCodes()
		@tabviews.ModalCSS()
		<head>
			<title>FOOd-BAR</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://unpkg.com/htmx.org/dist/htmx.min.js"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
			<link rel="stylesheet" href="/static/tailwind.css"/>
			<link rel="icon" type="image/x-icon" href={ fmt.Sprintf("%s/static/foodbarfavicon.svg", foodlib.PagePrefix) }/>
			//<link rel="stylesheet" href={ fmt.Sprintf("%s/styles/templ.css", foodlib.PagePrefix) }/>
		</head>
		<body class="bodycolors">
			@BodyContents(pd)
		</body>
	</html>
}

script htmxAllowedCodes() {
	document.addEventListener("DOMContentLoaded", (event) => {
		document.body.addEventListener("htmx:beforeSwap", function(evt) {
			if (evt.detail.xhr.status === 422) {
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
	})
}

css PageContainerCSS() {
	display: flex;
	flex-direction: column;
}

css PageHeaderContainerCSS() {
	display: flex;
	flex-direction: row;
	padding: 10px;
	justify-content: center;
	align-items: center;
}

css TabViewContainerCSS() {
	display: flex;
	flex-direction: row;
	flex: 1;
}

css TabButtonContainerCSS() {
	display: flex;
	flex-direction: row;
	cursor: pointer;
}

templ BodyContents(pd *foodlib.PageData) {
	<div class={ PageContainerCSS() }>
		<div id="pageHeader" class={ PageHeaderContainerCSS() }>
			Hello, chef! Welcome to FOOdBAR!
		</div>
		<div id="tabButtonContainer" class={ TabButtonContainerCSS() }>
			for _, tbd := range pd.GetTabButtonData() {
				@TabButton(tbd)
			}
		</div>
		<div id="tabViewContainer" class={ TabViewContainerCSS() }>
			for _, td := range pd.TabDatas {
				@TabContainer(pd, td)
			}
		</div>
	</div>
}

templ OOBtabViewContainer(pd *foodlib.PageData, tbd *foodlib.TabData) {
	if tbd != nil && tbd.Ttype != foodlib.Invalid {
		<div id="tabViewContainer" hx-swap-oob="beforeend">
			@TabContainer(pd, tbd)
		</div>
	}
}

templ OOBtabButtonToggle(tbd foodlib.TabButtonData) {
	if tbd.Ttype != foodlib.Invalid {
		<div id={ fmt.Sprintf("tabButton_%s", tbd.Ttype.String()) } hx-swap-oob="outerHTML">
			@TabButton(tbd)
		</div>
	}
}

css TabButtonItemCSS() {
	display: flex;
	flex-direction: row;
	padding: 10px;
	border-bottom: 1px solid;
	border-top: 1px solid;
	cursor: pointer;
	border-radius: 10px;
}

// TODO: make this have a loading animation

templ TabButton(tbd foodlib.TabButtonData) {
	if tbd.Ttype != foodlib.Invalid {
		if !tbd.Active {
			<div
				hx-get={ fmt.Sprintf("%s/api/tabButton/activate/%s", foodlib.PagePrefix, tbd.Ttype.String()) }
				hx-swap="outerHTML"
				id={ fmt.Sprintf("tabButton_%s", tbd.Ttype.String()) }
				class={ TabButtonItemCSS() }
			>
				{ fmt.Sprintf("üçú %s",tbd.Ttype.String()) }
			</div>
		} else {
			<div
				hx-delete={ fmt.Sprintf("%s/api/tabButton/deactivate/%s", foodlib.PagePrefix, tbd.Ttype.String()) }
				hx-target={ fmt.Sprintf("#tabContainer_%s", tbd.Ttype.String()) }
				hx-swap="outerHTML"
				id={ fmt.Sprintf("tabButton_%s", tbd.Ttype.String()) }
				class={ TabButtonItemCSS() }
			>
				{ fmt.Sprintf("%s üçú",tbd.Ttype.String()) }
			</div>
		}
	}
}

templ TabContainer(pd *foodlib.PageData, td *foodlib.TabData) {
	if td != nil && td.Ttype != foodlib.Invalid {
		<div id={ fmt.Sprintf("tabContainer_%s", td.Ttype) } style="display: flex; flex-direction: row; flex: 1;">
			<div class={ TabContainerCSS() }>
				@RenderTabContents(pd, td)
			</div>
			<div
				id={ fmt.Sprintf("resizebar_%s", td.Ttype) }
				class={ Resizebar() }
				onmousedown={ resizeTab(td.Ttype.String()) }
			></div>
		</div>
	}
}

// TODO: make this better
script resizeTab(tabtarget string) {
	let dragBar = document.getElementById("resizebar_"+tabtarget)
	let div1 = document.getElementById("tabContainer_"+tabtarget)
	dragStartWidth = div1.offsetWidth;
	window.addEventListener('mousemove', resize);

	window.addEventListener('mouseup', () => {
		window.removeEventListener('mousemove', resize); 
	});

	function resize(e) {
		const widthDiff = e.clientX - dragBar.offsetLeft; 
		div1.style.flex = `0 0 ${dragStartWidth + widthDiff}px`;
	}
}

css TabContainerCSS() {
	display: flex;
	align-self: stretch;
	flex-direction: column;
	flex: 1 1;
}

css Resizebar() {
	display: flex;
	flex-direction: row;
	flex: 0;
	cursor: ew-resize;
	border-left: 2px dashed;
}

templ RenderTabContents(pd *foodlib.PageData, td *foodlib.TabData) {
	switch td.Ttype {
		case foodlib.Recipe:
			@tabviews.RenderRecipeTab(pd, td)
		case foodlib.Pantry:
			@tabviews.RenderPantryTab(pd, td)
		case foodlib.Menu:
			@tabviews.RenderMenuTab(pd, td)
		case foodlib.Shopping:
			@tabviews.RenderShoppingTab(pd, td)
		case foodlib.Preplist:
			@tabviews.RenderPreplistTab(pd, td)
		case foodlib.Earnings:
			@tabviews.RenderEarningsTab(pd, td)
		case foodlib.Customer:
			@tabviews.RenderCustomerTab(pd, td)
		case foodlib.Events:
			@tabviews.RenderEventsTab(pd, td)
	}
}

script getColorScheme(mediaQueryEndpoint string) {
	// Function to send the media query value to the endpoint
	function sendMediaQueryValue(querystring, value) {
		// Define the endpoint URL
		const endpoint = mediaQueryEndpoint;
		const data = new URLSearchParams();
		data.append('query', querystring);
		data.append('value', value);
		const options = {
			method: 'POST',
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded' // Specify the content type as JSON
			},
			body: data // Convert the data object to a JSON string
		}
		// Send a GET request to the endpoint
		fetch(endpoint, options)
			.then(response => {
				if (response.ok) {
					console.log('Media query value sent successfully');
				} else {
					console.error('Failed to send media query value');
				}
			})
			.catch(error => {
				console.error('Error occurred while sending media query value:', error);
			});
	}
	function checkColorscheme() {
		// Define your media query here
		const querystring = '(prefers-color-scheme: dark)';
		const mediaQuery = window.matchMedia(querystring);
		if (mediaQuery.matches) {
			sendMediaQueryValue(querystring, 'dark');
		} else {
			sendMediaQueryValue(querystring, 'light');
		}
	}

	checkColorscheme()
}
