package views

import (
	"fmt"
	"FOOdBAR/views/viewutils"
	"FOOdBAR/views/tabviews"
	foolib "FOOdBAR/lib"
)

script htmxAllowedCodes() {
	document.addEventListener("DOMContentLoaded", (event) => {
		document.body.addEventListener("htmx:beforeSwap", function(evt) {
			if (evt.detail.xhr.status === 422) {
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
	})
}

templ Homepage(pd *viewutils.PageData) {
	<!DOCTYPE html>
	@colorsCSS()
	<html lang="en">
		<head>
			<title>üçú FOOd-BAR</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://unpkg.com/htmx.org/dist/htmx.min.js"></script>
			<link rel="stylesheet" href="/FOOdBAR/styles/templ.css"/>
		</head>
		<body class="bodycolors">
			@BodyContents(pd)
			@htmxAllowedCodes()
		</body>
	</html>
}

templ BodyContents(pd *viewutils.PageData) {
	<div class={ PageContainerCSS() }>
		<div id="pageHeader" class={ PageHeaderContainerCSS() }>
			Hello, chef! Welcome to üçú FOOd-BAR üçú
		</div>
		<div id="tabButtonContainer" class={ TabButtonContainerCSS() }>
			@viewutils.RenderPointerListWithComponent(pd.TabDatas, TabButton)
		</div>
		<div id="tabViewContainer" class={ TabViewContainerCSS() }>
			@viewutils.RenderPointerListWithComponent(foolib.FilterPointerSlice(func(t *viewutils.TabData) bool { return t.IsActive() }, pd.TabDatas), TabContainer)
		</div>
	</div>
}

templ OOBtabViewContainer(tbd *viewutils.TabData) {
	<div id="tabViewContainer" hx-swap-oob="beforeend">
		@TabContainer(tbd)
	</div>
}

templ OOBtabButtonToggle(tbd *viewutils.TabData) {
	<div id={ fmt.Sprintf("tabButton_%s", tbd.String()) } hx-swap-oob="outerHTML">
		@TabButton(tbd)
	</div>
}

// this has to return a tab button that does the hx-post to pull up the tab
// and also is able to detect if it is dragged and to where
templ TabButton(tbd *viewutils.TabData) {
	if !tbd.IsActive() {
		<div
			hx-get={ fmt.Sprintf("/FOOdBAR/api/tabButton/activate/%s", tbd.String()) }
			hx-swap="outerHTML"
			id={ fmt.Sprintf("tabButton_%s", tbd.String()) }
			class={ TabButtonItemCSS() }
		>
			{ fmt.Sprintf("üçú %s",tbd.String()) }
		</div>
	} else {
		<div
			hx-delete={ fmt.Sprintf("/FOOdBAR/api/tabButton/deactivate/%s", tbd.String()) }
			hx-target={ fmt.Sprintf("#tabContainer_%s", tbd.String()) }
			hx-swap="outerHTML"
			id={ fmt.Sprintf("tabButton_%s", tbd.String()) }
			class={ TabButtonItemCSS() }
		>
			{ fmt.Sprintf("%s üçú",tbd.String()) }
		</div>
	}
}

templ MaximizeTabButton(tt viewutils.TabType) {
	<div
		hx-post={ fmt.Sprintf("/FOOdBAR/api/tabButton/maximize/%s", tt) }
		hx-target="#tabViewContainer"
		id={ fmt.Sprintf("tabButton_%s", tt) }
		class={ TabHeaderItemCSS("0") }
		style="cursor: pointer;"
	>
		@viewutils.Maximize()
	</div>
}

templ TabContainer(td *viewutils.TabData) {
	<div id={ fmt.Sprintf("tabContainer_%s", td.Ttype) } class={ TabContainerCSS() }>
		@RenderTabContents(td)
	</div>
}

templ RenderTabContents(td *viewutils.TabData) {
	switch td.Ttype {
		case viewutils.Recipe:
			<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
				@MaximizeTabButton(td.Ttype)
				<div class={ TabHeaderTitleCSS() }>
					Recipes!
				</div>
			</div>
			<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
				@tabviews.RecipeTabContents(td)
			</div>
		case viewutils.Pantry:
			<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
				@MaximizeTabButton(td.Ttype)
				<div class={ TabHeaderTitleCSS() }>
					Pantry!
				</div>
			</div>
			<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
				@tabviews.PantryTabContents(td)
			</div>
		case viewutils.Menu:
			<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
				@MaximizeTabButton(td.Ttype)
				<div class={ TabHeaderTitleCSS() }>
					Menu!
				</div>
			</div>
			<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
				@tabviews.MenuTabContents(td)
			</div>
		case viewutils.Shopping:
			<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
				@MaximizeTabButton(td.Ttype)
				<div class={ TabHeaderTitleCSS() }>
					Shopping!
				</div>
			</div>
			<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
				@tabviews.ShoppingTabContents(td)
			</div>
		case viewutils.Preplist:
			<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
				@MaximizeTabButton(td.Ttype)
				<div class={ TabHeaderTitleCSS() }>
					Preplist!
				</div>
			</div>
			<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
				@tabviews.PreplistTabContents(td)
			</div>
		case viewutils.Earnings:
			<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
				@MaximizeTabButton(td.Ttype)
				<div class={ TabHeaderTitleCSS() }>
					Earnings!
				</div>
			</div>
			<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
				@tabviews.EarningsTabContents(td)
			</div>
	}
}
