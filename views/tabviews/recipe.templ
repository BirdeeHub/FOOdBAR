package tabviews

import (
	"fmt"
	"FOOdBAR/views/viewutils"
)

templ RecipeTabContents(td *viewutils.TabData) {
	@viewutils.RenderListWithComponent(td.GetTabItems(), RecipeItemContainer)
}

templ RecipeItemContainer(item *viewutils.TabItem) {
	<div id={ fmt.Sprintf("%s", item.ItemID.String()) } class={ TabListItemCSS() }>
		<div class={ ListItemElementCSS() }>
			{ item.ItemID.String() }
		</div>
		<div class={ ListItemElementCSS() }>
			@viewutils.Trashcan()
		</div>
	</div>
}

templ RenderRecipeTab(td *viewutils.TabData) {
	<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
		<div class={ TabHeaderTitleCSS() }>
			Recipes!
		</div>
		<div
			id={ fmt.Sprintf("tabItemAdd_%s", td.Ttype) }
			hx-post={ fmt.Sprintf("%s/api/itemCreateModal/open/%s", viewutils.PagePrefix, td.Ttype.String()) }
			hx-swap="beforeend"
			hx-target="body"
			class={ TabHeaderButtonCSS("0 0 1.5rem") }
		>
			@viewutils.AddCircle()
		</div>
		@MaximizeTabButton(td.Ttype)
	</div>
	<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
		@RecipeTabContents(td)
	</div>
}

templ ModalRecipeContent(item *viewutils.TabItem) {
	if item != nil {
		<div style="display: flex; flex-direction: column; flex: 0 1;">
			Hello from { item.Ttype.String() }
		</div>
		<button _="on click trigger closeModal">Close</button>
	}
}
