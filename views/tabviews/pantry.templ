package tabviews

import (
	"fmt"
	foodlib "FOOdBAR/FOOlib"
	"FOOdBAR/db"
)

templ PantryTabContents(pd *foodlib.PageData, td *foodlib.TabData) {
	for _, ti := range td.GetTabItems() {
		@PantryItemContainer(pd, ti)
	}
}

templ PantryItemContainer(pd *foodlib.PageData, item *foodlib.TabItem) {
	<div id={ fmt.Sprintf("%s", item.ItemID.String()) } class={ TabListItemCSS() }>
		<div class={ ListItemElementCSS() }>
			{ item.ItemID.String() }
		</div>
		<div class={ ListItemElementCSS() }>
			if itemData, _ := db.GetTabItemData(pd.UserID, item); item != nil {
				if name := ""; db.GetTabItemDataValue(itemData, "name", &name) == nil {
					{ name }
				}
			}
		</div>
		<div class={ ListItemElementCSS() }>
			@EditTabItemButton(item)
		</div>
	</div>
}

templ RenderPantryTab(pd *foodlib.PageData, td *foodlib.TabData) {
	//TODO: This should fetch the stuff from db, and prepopulate with existing data
	<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
		<div class={ TabHeaderTitleCSS() }>
			Pantry!
		</div>
		@AddTabItemButton(td.Ttype)
		@MaximizeTabButton(td.Ttype)
	</div>
	<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
		@PantryTabContents(pd, td)
	</div>
}

templ OOBsendBackSubmitStatus(tt foodlib.TabType, message string, e error){
	<div id={ fmt.Sprintf("modalsubmitMessage_%s", tt.String()) } hx-swap-oob="true">
		<div class="text-green-500">
			{ message }
		</div>
		<div class="text-red-500">
			if e != nil {
				{ e.Error() }
			}
		</div>
	</div>
}

templ ModalPantryContent(pd *foodlib.PageData, item *foodlib.TabItem, e error) {
	if itemData, _ := db.GetTabItemData(pd.UserID, item); item != nil {
		<div style="display: flex; flex-direction: column; flex: 0 1;">
			Hello from { item.Ttype.String() }
			<form
				hx-post={ fmt.Sprintf("%s/api/submitItemInfo/%s/%s", foodlib.PagePrefix, item.Ttype.String(), item.ItemID.String()) }
				hx-swap="none"
			>
				<div style="display: flex; flex-direction: column; flex: 0 0;">
					Name:
					if name := ""; db.GetTabItemDataValue(itemData, "name", &name) == nil {
						<input class="text-black" value={ name } type="text" name="itemName"/>
					} else {
						<input class="text-black" value="" type="text" name="itemName"/>
					}
					<div style="display: flex; flex-direction: row; flex: 0 1;">
						Dietary:
						<div
							hx-get={ fmt.Sprintf("%s/api/modalGetNewField/%s/%s/%s", foodlib.PagePrefix, item.Ttype.String(), item.ItemID.String(), "dietary") }
							hx-trigger="click"
							hx-swap="none"
							style="cursor: pointer; height: 100%; width: 1.5rem;"
						>
							@AddCircle()
						</div>
					</div>
					<div style="display: flex; flex-direction: row; flex: 0 1;">
						<div id="dietary">
							if dietaries := []string{}; db.GetTabItemDataValue(itemData, "dietary", &dietaries) == nil {
								for _, v := range dietaries {
									@ExtraField(v, "dietary")
								}
							} else {
								@ExtraField("", "dietary")
							}
						</div>
					</div>
					Amount:
					if amount := 0.0; db.GetTabItemDataValue(itemData, "amount", &amount) == nil {
						<input class="text-black" value={ fmt.Sprintf("%f", amount) } type="text" name="itemAmount"/>
					} else {
						<input class="text-black" value="" type="text" name="itemAmount"/>
					}
					Units:
					if units := ""; db.GetTabItemDataValue(itemData, "units", &units) == nil {
						<input class="text-black" value={ units } type="text" name="itemUnits"/>
					} else {
						<input class="text-black" value="" type="text" name="itemUnits"/>
					}
					<button action="submit">submit</button>
					<div id={ fmt.Sprintf("modalsubmitMessage_%s", item.Ttype.String()) }>
						if e != nil {
							{ e.Error() }
						}
					</div>
				</div>
			</form>
		</div>
	}
}
