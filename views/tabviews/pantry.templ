package tabviews

import (
	"fmt"
	foodlib "FOOdBAR/FOOlib"
	"FOOdBAR/db"
)

templ PantryTabContents(td *foodlib.TabData) {
	for _, ti := range td.GetTabItems() {
		@PantryItemContainer(ti)
	}
}

templ PantryItemContainer(item *foodlib.TabItem) {
	<div id={ fmt.Sprintf("%s", item.ItemID.String()) } class={ TabListItemCSS() }>
		<div class={ ListItemElementCSS() }>
			{ item.ItemID.String() }
		</div>
		<div class={ ListItemElementCSS() }>
			@Trashcan()
		</div>
	</div>
}

templ RenderPantryTab(pd *foodlib.PageData, td *foodlib.TabData) {
	<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
		<div class={ TabHeaderTitleCSS() }>
			Pantry!
		</div>
		@AddTabItemButton(td.Ttype)
		@MaximizeTabButton(td.Ttype)
	</div>
	<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
		@PantryTabContents(td)
	</div>
}

templ ModalPantryContent(pd *foodlib.PageData, item *foodlib.TabItem, e error) {
	if item != nil {
		//TODO: This should fetch the stuff from db based on item, and prepopulate with existing data
		if itemData, err := db.GetTabItemData(pd, item); err == nil {
			<div style="display: flex; flex-direction: column; flex: 0 1;">
				Hello from { item.Ttype.String() }
				<form
					hx-post={ fmt.Sprintf("%s/api/submitItemInfo/%s/%s", foodlib.PagePrefix, item.Ttype.String(), item.ItemID.String()) }
					hx-swap="none"
				>
					<div style="display: flex; flex-direction: column; flex: 0 0;">
						Name:
						<input class="text-black" value="" type="text" name="itemName"/>
						<div style="display: flex; flex-direction: row; flex: 0 1;">
							Dietary:
							<div
								hx-trigger={ "click" }
								hx-get={ fmt.Sprintf("%s/api/modalGetNewField/%s/%s/%s", foodlib.PagePrefix, item.Ttype.String(), item.ItemID.String(), "dietary") }
								hx-swap="none"
								style="cursor: pointer; height: 100%; width: 1.5rem;"
							>
								@AddCircle()
							</div>
						</div>
						<div style="display: flex; flex-direction: row; flex: 0 1;">
							<div id="dietary">
								if itemData != nil {
									if dietary, ok := itemData["dietary"]; ok {
										if dietaries, ok := dietary.([]string); ok {
											for _, v := range dietaries {
												@ExtraField(v, "dietary")
											}
										} else {
											@ExtraField("", "dietary")
										}
									} else {
										@ExtraField("", "dietary")
									}
								} else {
									@ExtraField("", "dietary")
								}
							</div>
						</div>
						Amount:
						<input class="text-black" value="" type="text" name="itemAmount"/>
						Units:
						<input class="text-black" value="" type="text" name="itemUnits"/>
						<button action="submit" _="on click trigger closeModal">submit</button>
					</div>
				</form>
			</div>
		}
	}
}
