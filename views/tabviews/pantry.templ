package tabviews

import (
	"fmt"
	foodlib "FOOdBAR/FOOlib"
)

templ PantryTabContents(td *foodlib.TabData) {
	for _, ti := range td.GetTabItems() {
		@PantryItemContainer(ti)
	}
}

templ PantryItemContainer(item *foodlib.TabItem) {
	<div id={ fmt.Sprintf("%s", item.ItemID.String()) } class={ TabListItemCSS() }>
		<div class={ ListItemElementCSS() }>
			{ item.ItemID.String() }
		</div>
		<div class={ ListItemElementCSS() }>
			@Trashcan()
		</div>
	</div>
}

templ RenderPantryTab(td *foodlib.TabData) {
	<div id={ fmt.Sprintf("tabTitle_%s", td.Ttype) } class={ TabHeaderContainerCSS() }>
		<div class={ TabHeaderTitleCSS() }>
			Pantry!
		</div>
		@AddTabItemButton(td.Ttype)
		@MaximizeTabButton(td.Ttype)
	</div>
	<div id={ fmt.Sprintf("tabContents_%s", td.Ttype) }>
		@PantryTabContents(td)
	</div>
}

templ ModalPantryContent(item *foodlib.TabItem, e error) {
	if item != nil {
		//TODO: This should fetch the stuff from db based on item, and prepopulate with existing data
		if itemData := item; itemData != nil {
			<div style="display: flex; flex-direction: column; flex: 0 1;">
				Hello from { item.Ttype.String() }
				<form
					hx-post={ fmt.Sprintf("%s/api/submitItemInfo/%s/%s", foodlib.PagePrefix, item.Ttype.String(), item.ItemID.String()) }
					hx-swap="none"
				>
					Name:
					<input class="text-black" value="" type="text" name="itemName"/>
					Dietary:
					//TODO: render list of dietary inputs, with button to add more
					<input class="text-black" value="" type="text" name="itemDietary"/>
					Amount:
					<input class="text-black" value="" type="text" name="itemAmount"/>
					Units:
					<input class="text-black" value="" type="text" name="itemUnits"/>
					<button action="submit" _="on click trigger closeModal">submit</button>
				</form>
			</div>
		}
	}
}
