package tabviews


import (
	"fmt"
	"github.com/google/uuid"
	"FOOdBAR/db"
	foodlib "FOOdBAR/FOOlib"
)

templ OOBsendBackSubmitStatus(id uuid.UUID, message string, e error) {
	<div id={ fmt.Sprintf("itemSubmitMessage_%s", id.String()) } hx-swap-oob="true">
		@submitStatusMessage(id, message, e)
	</div>
}

templ submitStatusMessage(id uuid.UUID, message string, e error) {
	<div id={ fmt.Sprintf("itemSubmitMessage_%s", id.String()) }>
		<div class="text-green-500">
			{ message }
		</div>
		<div class="text-red-500">
			if e != nil {
				{ e.Error() }
			}
		</div>
	</div>
}

templ OOBExtraField(field string, itemid uuid.UUID) {
	<div id={ string(templ.URL(fmt.Sprintf("%s_edit_%s", field, itemid.String()))) } hx-swap-oob="beforeend">
		@ExtraField("", field, itemid)
	</div>
}

// NOTE:
// The first line of hyperscript is just an event possibly used later for undo
// The rest gives each new field a unique ID and was fun
templ ExtraField(val string, field string, itemid uuid.UUID) {
	<input
		_="on input trigger reactiveInputEvent(value: (value of me), id: @id) end

			on load put the children of the closest parent <div /> into myList
			then for item in myList indexed by i
			if the item's index does not exist
			set the item's index to i
			then set the item's id to item's id + '_' + i

			/* yes i edited hyperscript JUST for indexed by instead of index */
		"
		class="text-black"
		type="text"
		id={ fmt.Sprintf("%s_%s", templ.URL(field), itemid.String()) }
		name={ fmt.Sprintf("%s[]", templ.URL(field)) }
		value={ val }
	/>
}

// TODO: make this button do something
templ ExpandTabItemButton(item *foodlib.TabItem) {
	<div class="w-6">
		@Expand()
	</div>
}

// TODO: make this button do something
templ ContractTabItemButton(item *foodlib.TabItem) {
	<div class="w-6">
		@Contract()
	</div>
}

templ RenderSubmissionContent(pd *foodlib.PageData, item *foodlib.TabItem, msg string, e error) {
	switch item.Ttype {
		case foodlib.Recipe:
			@SubmitRecipeBlock(pd, item, msg, e)
		case foodlib.Pantry:
			@SubmitPantryBlock(pd, item, msg, e)
		case foodlib.Menu:
			@SubmitMenuBlock(pd, item, msg, e)
		case foodlib.Shopping:
			@SubmitShoppingBlock(pd, item, msg, e)
		case foodlib.Preplist:
			@SubmitPreplistBlock(pd, item, msg, e)
		case foodlib.Earnings:
			@SubmitEarningsBlock(pd, item, msg, e)
		case foodlib.Customer:
			@SubmitCustomerBlock(pd, item, msg, e)
		case foodlib.Events:
			@SubmitEventsBlock(pd, item, msg, e)
	}
}

templ OOBmoreTabItems(pd *foodlib.PageData, td *foodlib.TabData, more bool) {
	<div id={ fmt.Sprintf("moreGetter_%s", td.Ttype.String()) } hx-swap-oob="outerHTML">
		@MoreTabItems(pd, td, more)
	</div>
}

// NOTE: pass in a new TabData with only the new items, and to the real one in db, append the items.
templ MoreTabItems(pd *foodlib.PageData, td *foodlib.TabData, more bool) {
	switch td.Ttype {
		case foodlib.Recipe:
			for _, ti := range td.Items {
				@RecipeItemContainer(pd, td, ti)
			}
		case foodlib.Pantry:
			for _, ti := range td.Items {
				@PantryItemContainer(pd, td, ti)
			}
		case foodlib.Menu:
			for _, ti := range td.Items {
				@MenuItemContainer(pd, td, ti)
			}
		case foodlib.Shopping:
			for _, ti := range td.Items {
				@ShoppingItemContainer(pd, td, ti)
			}
		case foodlib.Preplist:
			for _, ti := range td.Items {
				@PreplistItemContainer(pd, td, ti)
			}
		case foodlib.Earnings:
			for _, ti := range td.Items {
				@EarningsItemContainer(pd, td, ti)
			}
		case foodlib.Customer:
			for _, ti := range td.Items {
				@CustomerItemContainer(pd, td, ti)
			}
		case foodlib.Events:
			for _, ti := range td.Items {
				@EventsItemContainer(pd, td, ti)
			}
	}
	if more {
		@GetNewMoreGetter(td.Ttype)
	}
}

templ OOBRenderItemContainer(pd *foodlib.PageData, td *foodlib.TabData, item *foodlib.TabItem) {
	if itemData, _ := db.GetTabItemData(pd.UserID, item); itemData != nil && item != nil {
		<div
			id={ fmt.Sprintf("i_%s", item.ItemID.String()) }
			hx-swap-oob="outerHTML"
		>
			// TODO: make for other tabs
			switch item.Ttype {
				case foodlib.Recipe:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Pantry:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Menu:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Shopping:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Preplist:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Earnings:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Customer:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Events:
					@PantryItemContents(pd, td, item, itemData)
			}
		</div>
	}
}

// TODO: make for other tabs
templ OOBRenderItemBeforeThis(pd *foodlib.PageData, td *foodlib.TabData, item *foodlib.TabItem, target uuid.UUID) {
	if itemData, _ := db.GetTabItemData(pd.UserID, item); itemData != nil && item != nil {
		<div
			id={ fmt.Sprintf("i_%s", item.ItemID.String()) }
			hx-target={ fmt.Sprintf("#i_%s", target.String()) }
			hx-swap-oob="beforebegin"
		>
			// TODO: make for other tabs
			switch item.Ttype {
				case foodlib.Recipe:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Pantry:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Menu:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Shopping:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Preplist:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Earnings:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Customer:
					@PantryItemContents(pd, td, item, itemData)
				case foodlib.Events:
					@PantryItemContents(pd, td, item, itemData)
			}
		</div>
	}
}

templ GetNewMoreGetter(tt foodlib.TabType) {
	<div
		id={ fmt.Sprintf("moreGetter_%s", tt.String()) }
		hx-trigger="revealed"
		hx-swap="outerHTML"
		hx-get={ fmt.Sprintf("%s/api/getMoreItems/%s", foodlib.PagePrefix, tt) }
	></div>
}

templ RenderTabContents(pd *foodlib.PageData, td *foodlib.TabData, firstRender bool) {
	switch td.Ttype {
		case foodlib.Recipe:
			@RenderRecipeTab(pd, td, firstRender)
		case foodlib.Pantry:
			@RenderPantryTab(pd, td, firstRender)
		case foodlib.Menu:
			@RenderMenuTab(pd, td, firstRender)
		case foodlib.Shopping:
			@RenderShoppingTab(pd, td, firstRender)
		case foodlib.Preplist:
			@RenderPreplistTab(pd, td, firstRender)
		case foodlib.Earnings:
			@RenderEarningsTab(pd, td, firstRender)
		case foodlib.Customer:
			@RenderCustomerTab(pd, td, firstRender)
		case foodlib.Events:
			@RenderEventsTab(pd, td, firstRender)
	}
}


// called by views/homepage.go during rendering or removing old tabs
// this div moved here because its counterpart OOB templates are here.
templ MainTabContents(pd *foodlib.PageData, td *foodlib.TabData) {
	<div
		id={ fmt.Sprintf("tabContainerTarget_%s", td.Ttype.String()) }
		class="flex self-stretch flex-col flex-auto flex-grow"
	>
		@RenderTabContents(pd, td, true)
	</div>
}

templ MaximizeTabButton(tt foodlib.TabType) {
	<div
		id={ fmt.Sprintf("tabButton_%s", tt) }
		hx-post={ fmt.Sprintf("%s/api/tabButton/maximize/%s", foodlib.PagePrefix, tt) }
		hx-target="#tabViewContainer"
		class={ TabHeaderButtonCSS() }
	>
		@Maximize()
	</div>
}
