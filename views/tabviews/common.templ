package tabviews

import (
	"fmt"
	"github.com/google/uuid"
	foodlib "FOOdBAR/FOOlib"
)

templ ColorsCSS() {
	<style type="text/css">
		@media (prefers-color-scheme: dark) {
			.bodycolors {
				border-color: white;
				background-color: #1e1e1f;
				color: white;
				fill: white;
				stroke: white;
			}
		}
		@media (not (prefers-color-scheme: dark)) {
			.bodycolors {
				border-color: black;
				background-color: lightgray;
				color: black;
				fill: black;
				stroke: black;
			}
		}
	</style>
}

templ OOBsendBackSubmitStatus(id uuid.UUID, message string, e error){
	<div id={ fmt.Sprintf("itemSubmitMessage_%s", id.String()) } hx-swap-oob="true">
		@submitStatusMessage(id, message, e)
	</div>
}

templ submitStatusMessage(id uuid.UUID, message string, e error){
	<div id={ fmt.Sprintf("itemSubmitMessage_%s", id.String()) }>
		<div class="text-green-500">
			{ message }
		</div>
		<div class="text-red-500">
			if e != nil {
				{ e.Error() }
			}
		</div>
	</div>
}

templ OOBExtraField(field string, itemid uuid.UUID) {
	<div id={ string(templ.URL(fmt.Sprintf("%s_%s", field, itemid.String()))) } hx-swap-oob="beforeend">
		@ExtraField("", field)
	</div>
}

templ ExtraField(val string, field string) {
	<input
		class="text-black"
		value={ val }
		type="text"
		name={ fmt.Sprintf("%s[]", templ.URL(field)) }
	/>
}

templ MaximizeTabButton(tt foodlib.TabType) {
	<div
		id={ fmt.Sprintf("tabButton_%s", tt) }
		hx-post={ fmt.Sprintf("%s/api/tabButton/maximize/%s", foodlib.PagePrefix, tt) }
		hx-target="#tabViewContainer"
		class={ TabHeaderButtonCSS("0 0 1.5rem") }
	>
		@Maximize()
	</div>
}

templ ModalAddItemButton(tt foodlib.TabType) {
	<div
		id={ fmt.Sprintf("tabItemAdd_%s", tt.String()) }
		hx-get={ fmt.Sprintf("%s/api/itemCreateModal/open/%s", foodlib.PagePrefix, tt.String()) }
		hx-swap="beforeend"
		hx-target="body"
		class={ TabHeaderButtonCSS("0 0 1.5rem") }
	>
		@AddCircle()
	</div>
}

templ FlipAddItemButton(tt foodlib.TabType) {
	<div
		id={ fmt.Sprintf("tabItemAdd_%s", tt.String()) }
		hx-get={ fmt.Sprintf("%s/api/itemCreateFlip/open/%s", foodlib.PagePrefix, tt.String()) }
		hx-swap="none"
		class={ TabHeaderButtonCSS("0 0 1.5rem") }
	>
		@AddCircle()
	</div>
}

templ CloseFlipButton(tt foodlib.TabType) {
	<div
		id={ fmt.Sprintf("tabItemAdd_%s", tt.String()) }
		hx-get={ fmt.Sprintf("%s/api/itemEditFlip/close/%s", foodlib.PagePrefix, tt.String()) }
		hx-swap="none"
		class={ TabHeaderButtonCSS("0 0 1.5rem") }
	>
		@MinusCircle()
	</div>
}

templ EditTabItemButton(ti *foodlib.TabItem) {
	<div
		id={ fmt.Sprintf("ItemEdit_%s", ti.Ttype.String()) }
		hx-get={ fmt.Sprintf("%s/api/itemEditModal/open/%s/%s", foodlib.PagePrefix, ti.Ttype.String(), ti.ItemID.String()) }
		hx-swap="beforeend"
		hx-target="body"
		class={ TabHeaderButtonCSS("0 0 1.5rem") }
	>
		@EditSVG()
	</div>
}

templ RenderSubmissionContent(pd *foodlib.PageData, item *foodlib.TabItem, e error) {
	switch item.Ttype {
		case foodlib.Recipe:
			@SubmitRecipeBlock(pd, item, e)
		case foodlib.Pantry:
			@SubmitPantryBlock(pd, item, e)
		case foodlib.Menu:
			@SubmitMenuBlock(pd, item, e)
		case foodlib.Shopping:
			@SubmitShoppingBlock(pd, item, e)
		case foodlib.Preplist:
			@SubmitPreplistBlock(pd, item, e)
		case foodlib.Earnings:
			@SubmitEarningsBlock(pd, item, e)
		case foodlib.Customer:
			@SubmitCustomerBlock(pd, item, e)
		case foodlib.Events:
			@SubmitEventsBlock(pd, item, e)
	}
}

templ RenderFlipSubmitContent(pd *foodlib.PageData, item *foodlib.TabItem, e error) {
	switch item.Ttype {
		case foodlib.Recipe:
			@SubmitRecipeBlock(pd, item, e)
		case foodlib.Pantry:
			@SubmitPantryBlock(pd, item, e)
		case foodlib.Menu:
			@SubmitMenuBlock(pd, item, e)
		case foodlib.Shopping:
			@SubmitShoppingBlock(pd, item, e)
		case foodlib.Preplist:
			@SubmitPreplistBlock(pd, item, e)
		case foodlib.Earnings:
			@SubmitEarningsBlock(pd, item, e)
		case foodlib.Customer:
			@SubmitCustomerBlock(pd, item, e)
		case foodlib.Events:
			@SubmitEventsBlock(pd, item, e)
	}
}

templ ModalCSS() {
	<style type="text/css">
		/***** MODAL DIALOG ****/
		#modal {
			/* Underlay covers entire screen. */
			position: fixed;
			top:0px;
			bottom: 0px;
			left:0px;
			right:0px;
			z-index:1000;

			/* Flexbox centers the .modal-content vertically and horizontally */
			display:flex;
			flex-direction:column;
			align-items:center;

			/* Animate when opening */
			animation-name: fadeIn;
			animation-duration:150ms;
			animation-timing-function: ease;
		}

		#modal > .modal-underlay {
			/* underlay takes up the entire viewport. This is only
			required if you want to click to dismiss the popup */
			background-color:rgba(0,0,0,0.5);
			position: absolute;
			z-index: -1;
			top:0px;
			bottom:0px;
			left: 0px;
			right: 0px;
		}

		#modal > .modal-content {
			/* Position visible dialog near the top of the window */
			margin-top:10vh;

			/* Sizing for visible dialog */
			width:80%;
			max-width:600px;

			/* Display properties for visible dialog*/
			border:solid 1px;
			border-radius:8px;
			box-shadow: 0px 0px 20px 0px rgba(0,0,0,0.3);
			padding:20px;

			/* Animate when opening */
			animation-name:zoomIn;
			animation-duration:150ms;
			animation-timing-function: ease;
		}

		#modal.closing {
			/* Animate when closing */
			animation-name: fadeOut;
			animation-duration:150ms;
			animation-timing-function: ease;
		}

		#modal.closing > .modal-content {
			/* Animate when closing */
			animation-name: zoomOut;
			animation-duration:150ms;
			animation-timing-function: ease;
		}

		@keyframes fadeIn {
			0% {opacity: 0;}
			100% {opacity: 1;}
		} 

		@keyframes fadeOut {
			0% {opacity: 1;}
			100% {opacity: 0;}
		} 

		@keyframes zoomIn {
			0% {transform: scale(0.9);}
			100% {transform: scale(1);}
		} 

		@keyframes zoomOut {
			0% {transform: scale(1);}
			100% {transform: scale(0.9);}
		} 
	</style>
}

// requires above css to already be loaded (because otherwise we send it many many times)
// TODO: swap the main edit modals to a card flip of the whole tab instead,
// and use this for when you need to add things to other categories while already editing an item.
templ ItemEditModal(component templ.Component) {
	<div id="modal" _="on closeModal add .closing then wait for animationend then remove me">
		<div class="modal-underlay" _="on click trigger closeModal"></div>
		<div class="modal-content bodycolors">
			@component
		</div>
	</div>
}

templ CardFlipContainerCSS() {
	<style type="text/css">
	.card_container {
		height: 100%;
		width: 100%;
		perspective: 600px;
	}
	.card {
		width: 100%;
		height: 100%;
		position: relative;
		transition: transform 1s;
		transform-style: preserve-3d;
		transform-origin: center right;
	}
	.card__face {
		position: absolute;
		height: 100%;
		width: 100%;
		backface-visibility: hidden;
	}
	.card.is-flipped {
		transform: translateX(-100%) rotateY(-180deg);
	}
	.card__face--front {
	}

	.card__face--back {
		transform: rotateY( 180deg );
	}
	</style>
}

templ CardFlipContainer(front templ.Component, back templ.Component) {
	<div class="card_container">
		if back == nil {
			<div class="card">
				<div class="card__face card__face--front">
					@front
				</div>
				<div class="card__face card__face--back">
				</div>
			</div>
		} else {
			<div class="card is-flipped">
				<div class="card__face card__face--front">
				</div>
				<div class="card__face card__face--back">
					@back
				</div>
			</div>
		}
	</div>
}
