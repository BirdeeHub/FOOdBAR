package loginPage

import (
	"fmt"
	"FOOdBAR/views/tabviews"
	foodlib "FOOdBAR/FOOlib"
)

type LoginFormType string

const (
	LoginType  LoginFormType = "login"
	SignupType               = "signup"
)

script htmxAllowedCodes() {
	document.addEventListener("DOMContentLoaded", (event) => {
		document.body.addEventListener("htmx:beforeSwap", function(evt) {
			if (evt.detail.xhr.status === 406) {
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
			if (evt.detail.xhr.status === 422) {
				evt.detail.shouldSwap = true;
				evt.detail.isError = false;
			}
		});
	})
}

templ LoginPage(formtype LoginFormType, e error) {
	<!DOCTYPE html>
	@tabviews.ColorsCSS()

	<html lang="en">
		<head>
			<title>üçú Log in!</title>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1"/>
			<script src="https://unpkg.com/htmx.org/dist/htmx.min.js"></script>
			<link rel="icon" type="image/x-icon" href="/static/foodbarloginfavicon.svg"/>
			<link rel="stylesheet" href="/static/tailwind.css"/>
		</head>
		<body class="bodycolors">
			@LoginPageContents(formtype, e)
			@htmxAllowedCodes()
		</body>
	</html>
}

templ LoginPageContents(formtype LoginFormType, e error) {
	<div id="loginpage" class={ displayFlex("column") }>
		@FormTypeButton(formtype)
		<div style="border-bottom: 1px solid;">
		</div>
		@LoginForm(formtype, e)
	</div>
}
css modeButtonItemCSS() {
	display: flex;
	flex-direction: row;
	padding: 10px;
	border-bottom: 1px solid;
	border-top: 1px solid;
	cursor: pointer;
	border-radius: 10px;
}

templ FormTypeButton(formtype LoginFormType) {
	if formtype != "login" {
		<div style="display: flex; flex: row;">
			<div
				hx-get={ fmt.Sprintf("%s/loginform/%s", foodlib.PagePrefix, "login") }
				hx-swap="outerHTML"
				hx-target="#loginpage"
				id="loginbutton"
				class={ modeButtonItemCSS() }
			>
				Log in!
			</div>
		</div>
	} else {
		<div style="display: flex; flex: row;">
			<div
				hx-get={ fmt.Sprintf("%s/loginform/%s", foodlib.PagePrefix, "signup") }
				hx-swap="outerHTML"
				hx-target="#loginpage"
				id="signupbutton"
				class={ modeButtonItemCSS() }
			>
				Sign up!
			</div>
		</div>
	}
}

templ LoginForm(formtype LoginFormType, e error) {
	if formtype == LoginType {
		<form
			action={ templ.URL(fmt.Sprintf("%s/submitlogin", foodlib.PagePrefix)) }
			method="POST"
			enctype="application/x-www-form-urlencoded"
			class={ displayFlex("column") }
		>
			<div class={ displayFlex("row") } id="signupform">
				@LoginFormContents(formtype, e)
				<div style="flex: 1;">
				</div>
			</div>
		</form>
	} else {
		<form
			action={ templ.URL(fmt.Sprintf("%s/submitsignup", foodlib.PagePrefix)) }
			method="POST"
			enctype="application/x-www-form-urlencoded"
			class={ displayFlex("column") }
		>
			<div class={ displayFlex("row") } id="signupform">
				@LoginFormContents(formtype, e)
				<div style="flex: 1;">
				</div>
			</div>
		</form>
	}
}

css beepboop() {
	position: absolute;
	left: -9999px;
	width: 1px;
	height: 1px;
	overflow: hidden;
}

templ LoginFormContents(formtype LoginFormType, e error) {
	<div class={ displayFlex("column") }>
		if formtype == LoginType {
			Username:
			<input class="text-black" value="" type="text" name="username"/>
			Password:
			<input class="text-black" value="" type="password" name="password"/>
			<input class={ beepboop() } value="" type="text" name="beepboop"/>
			if e != nil {
				{ e.Error() }
			}
			<button class={ modeButtonItemCSS() } style="margin-top: 5px" type="submit">log in</button>
		} else {
			Username:
			<input class="text-black" value="" type="text" name="username"/>
			Password:
			<input class="text-black" value="" type="password" name="password"/>
			Confirm password:
			<input class="text-black" value="" type="password" name="confirmpassword"/>
			<input class={ beepboop() } value="" type="text" name="beepboop"/>
			if e != nil {
				{ e.Error() }
			}
			<button class={ modeButtonItemCSS() } style="margin-top: 5px" type="submit">sign up</button>
		}
	</div>
}

css displayFlex(direction string) {
	display: flex;
	flex-direction: { direction };
}
